"use strict";(self.webpackChunk_07_odin_restaurant=self.webpackChunk_07_odin_restaurant||[]).push([[826],{890:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([n.id,"/* layout */\nbody {\n  margin: 0;\n  min-height: 90dvh;\n}\n\nol,\nul,\nli {\n  margin: 0;\n}\n\n.projects-container input {\n  box-sizing: border-box;\n\n  padding: 0.25em 0.5em;\n  margin: 0;\n  width: max-content;\n  min-width: 100px;\n}\n\n.projects-container {\n  padding: 0.5em;\n  max-width: max(50%, 800px);\n  margin: 1em auto;\n\n  display: flex;\n  flex-direction: column;\n}\n\n#new-project-btn {\n  align-self: flex-start;\n}\n\n.tasks-container li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  margin: 0.5em 0;\n  gap: 0.5em;\n}\n\n.tasks-container {\n  padding: 0;\n  margin-top: 0.5em;\n}\n\n.task-item {\n}\n\n.task-buttons {\n  margin: 0;\n  display: flex;\n  gap: 0.25em;\n}\n\n.task-buttons button {\n  flex-shrink: 1;\n}\n\n.task {\n  flex: 1;\n}\n\n.project {\n  margin: 0.25em 0.25em;\n  padding: 0.5em;\n}\n\n.new-task-label {\n  margin: 0 0.5em;\n}\n\n.dialog-task-container {\n  display: grid;\n  gap: 0.5em;\n}\n\n.dialog-task-title,\n.dialog-task-description,\n.dialog-task-dueDate,\n.dialog-task-priority {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1em;\n}\n\n.dialog-button-group {\n  display: flex;\n  justify-content: space-between;\n}\n\n.dialog-task-container input,\n.dialog-task-container textarea,\n.dialog-task-container select,\n.dialog-task-container label {\n  padding: 0.25em 0.25em;\n}\n\n.new-project-container {\n  display: flex;\n  gap: 0.5em;\n  align-items: center;\n  flex-wrap: wrap;\n}\ndialog {\n  max-width: 100vw;\n}\n\n/* style */\n.hidden {\n  display: none;\n}\nbody {\n  background-color: #1a1b1c;\n}\nbutton {\n  background-color: #edb5bf;\n}\nbutton:hover {\n  background-color: rgba(237, 181, 191, 0.5);\n}\n.project {\n  background-color: #99ced3;\n  border-radius: 10px;\n  box-shadow: 2px 2px 15px 4px rgba(0, 0, 0, 0.06);\n}\n.projects-container input {\n  border: none;\n  box-shadow: 2px 2px 15px 4px rgba(0, 0, 0, 0.06);\n  border-radius: 10px;\n  background-color: rgba(255, 255, 255, 0.8);\n}\n\n.projects-container {\n  background-color: #4d6d9a;\n  box-shadow: 0 2px 15px 4px rgba(0, 0, 0, 0.06);\n  border-radius: 5px;\n  box-shadow: 2px 2px 15px 4px rgba(0, 0, 0, 0.06);\n}\n\n.task-buttons button {\n  padding: 0.45em 0.5em;\n  box-shadow: 2px 2px 15px 4px rgba(0, 0, 0, 0.06);\n}\n\n#new-project-dialog button {\n  padding: 0.3em 0.5em;\n  box-shadow: 2px 2px 15px 4px rgba(0, 0, 0, 0.06);\n}\n\n.dialog-task-container textarea {\n  resize: vertical;\n}\n\ninput:focus {\n  opacity: 0.8;\n}\n\n#new-project-btn {\n  margin-left: 5px;\n  padding: 0.25em 0.5em;\n}\n\ndialog::backdrop {\n  background-color: rgba(68, 68, 136, 0.5);\n}\n\n/* typography */\nbody {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-size: 32px;\n}\n\n.projects-container input {\n  font-size: 0.75em;\n  text-overflow: ellipsis;\n}\n.new-task-label {\n  font-size: 0.5em;\n  font-style: italic;\n  opacity: 0.8;\n}\n\n.dialog-task-container label {\n  font-size: 0.8em;\n}\n\n.dialog-task-container input,\n.dialog-task-container textarea,\n.dialog-task-container select {\n  font-size: 0.7em;\n}\n\n#new-project-dialog label,\n#new-project-dialog input {\n  font-size: 0.7em;\n}\n\n.task-buttons button,\n.new-task-btn,\n#new-project-btn {\n  font-size: 0.5em;\n}\n\n#new-project-dialog button {\n  font-size: 0.5em;\n}\n\n.dialog-button-group button {\n  font-size: 0.7em;\n}\n\ninput:focus {\n  font-style: italic;\n}\nbutton {\n  font-weight: bold;\n}\n\n.project-name {\n  font-weight: bold;\n}\n\ninput {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA,WAAW;AACX;EACE,SAAS;EACT,iBAAiB;AACnB;;AAEA;;;EAGE,SAAS;AACX;;AAEA;EACE,sBAAsB;;EAEtB,qBAAqB;EACrB,SAAS;EACT,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,0BAA0B;EAC1B,gBAAgB;;EAEhB,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,eAAe;EACf,eAAe;EACf,UAAU;AACZ;;AAEA;EACE,UAAU;EACV,iBAAiB;AACnB;;AAEA;AACA;;AAEA;EACE,SAAS;EACT,aAAa;EACb,WAAW;AACb;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,OAAO;AACT;;AAEA;EACE,qBAAqB;EACrB,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,UAAU;AACZ;;AAEA;;;;EAIE,aAAa;EACb,4DAA4D;EAC5D,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;;;;EAIE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,mBAAmB;EACnB,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;;AAEA,UAAU;AACV;EACE,aAAa;AACf;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,yBAAyB;EACzB,mBAAmB;EACnB,gDAAgD;AAClD;AACA;EACE,YAAY;EACZ,gDAAgD;EAChD,mBAAmB;EACnB,0CAA0C;AAC5C;;AAEA;EACE,yBAAyB;EACzB,8CAA8C;EAC9C,kBAAkB;EAClB,gDAAgD;AAClD;;AAEA;EACE,qBAAqB;EACrB,gDAAgD;AAClD;;AAEA;EACE,oBAAoB;EACpB,gDAAgD;AAClD;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,wCAAwC;AAC1C;;AAEA,eAAe;AACf;EACE,gDAAgD;EAChD,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,uBAAuB;AACzB;AACA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,gBAAgB;AAClB;;AAEA;;;EAGE,gBAAgB;AAClB;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;;;EAGE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,gDAAgD;AAClD",sourcesContent:["/* layout */\r\nbody {\r\n  margin: 0;\r\n  min-height: 90dvh;\r\n}\r\n\r\nol,\r\nul,\r\nli {\r\n  margin: 0;\r\n}\r\n\r\n.projects-container input {\r\n  box-sizing: border-box;\r\n\r\n  padding: 0.25em 0.5em;\r\n  margin: 0;\r\n  width: max-content;\r\n  min-width: 100px;\r\n}\r\n\r\n.projects-container {\r\n  padding: 0.5em;\r\n  max-width: max(50%, 800px);\r\n  margin: 1em auto;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n#new-project-btn {\r\n  align-self: flex-start;\r\n}\r\n\r\n.tasks-container li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  margin: 0.5em 0;\r\n  gap: 0.5em;\r\n}\r\n\r\n.tasks-container {\r\n  padding: 0;\r\n  margin-top: 0.5em;\r\n}\r\n\r\n.task-item {\r\n}\r\n\r\n.task-buttons {\r\n  margin: 0;\r\n  display: flex;\r\n  gap: 0.25em;\r\n}\r\n\r\n.task-buttons button {\r\n  flex-shrink: 1;\r\n}\r\n\r\n.task {\r\n  flex: 1;\r\n}\r\n\r\n.project {\r\n  margin: 0.25em 0.25em;\r\n  padding: 0.5em;\r\n}\r\n\r\n.new-task-label {\r\n  margin: 0 0.5em;\r\n}\r\n\r\n.dialog-task-container {\r\n  display: grid;\r\n  gap: 0.5em;\r\n}\r\n\r\n.dialog-task-title,\r\n.dialog-task-description,\r\n.dialog-task-dueDate,\r\n.dialog-task-priority {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 1em;\r\n}\r\n\r\n.dialog-button-group {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.dialog-task-container input,\r\n.dialog-task-container textarea,\r\n.dialog-task-container select,\r\n.dialog-task-container label {\r\n  padding: 0.25em 0.25em;\r\n}\r\n\r\n.new-project-container {\r\n  display: flex;\r\n  gap: 0.5em;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n}\r\ndialog {\r\n  max-width: 100vw;\r\n}\r\n\r\n/* style */\r\n.hidden {\r\n  display: none;\r\n}\r\nbody {\r\n  background-color: #1a1b1c;\r\n}\r\nbutton {\r\n  background-color: #edb5bf;\r\n}\r\nbutton:hover {\r\n  background-color: rgba(237, 181, 191, 0.5);\r\n}\r\n.project {\r\n  background-color: #99ced3;\r\n  border-radius: 10px;\r\n  box-shadow: 2px 2px 15px 4px rgba(0, 0, 0, 0.06);\r\n}\r\n.projects-container input {\r\n  border: none;\r\n  box-shadow: 2px 2px 15px 4px rgba(0, 0, 0, 0.06);\r\n  border-radius: 10px;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n}\r\n\r\n.projects-container {\r\n  background-color: #4d6d9a;\r\n  box-shadow: 0 2px 15px 4px rgba(0, 0, 0, 0.06);\r\n  border-radius: 5px;\r\n  box-shadow: 2px 2px 15px 4px rgba(0, 0, 0, 0.06);\r\n}\r\n\r\n.task-buttons button {\r\n  padding: 0.45em 0.5em;\r\n  box-shadow: 2px 2px 15px 4px rgba(0, 0, 0, 0.06);\r\n}\r\n\r\n#new-project-dialog button {\r\n  padding: 0.3em 0.5em;\r\n  box-shadow: 2px 2px 15px 4px rgba(0, 0, 0, 0.06);\r\n}\r\n\r\n.dialog-task-container textarea {\r\n  resize: vertical;\r\n}\r\n\r\ninput:focus {\r\n  opacity: 0.8;\r\n}\r\n\r\n#new-project-btn {\r\n  margin-left: 5px;\r\n  padding: 0.25em 0.5em;\r\n}\r\n\r\ndialog::backdrop {\r\n  background-color: rgba(68, 68, 136, 0.5);\r\n}\r\n\r\n/* typography */\r\nbody {\r\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n  font-size: 32px;\r\n}\r\n\r\n.projects-container input {\r\n  font-size: 0.75em;\r\n  text-overflow: ellipsis;\r\n}\r\n.new-task-label {\r\n  font-size: 0.5em;\r\n  font-style: italic;\r\n  opacity: 0.8;\r\n}\r\n\r\n.dialog-task-container label {\r\n  font-size: 0.8em;\r\n}\r\n\r\n.dialog-task-container input,\r\n.dialog-task-container textarea,\r\n.dialog-task-container select {\r\n  font-size: 0.7em;\r\n}\r\n\r\n#new-project-dialog label,\r\n#new-project-dialog input {\r\n  font-size: 0.7em;\r\n}\r\n\r\n.task-buttons button,\r\n.new-task-btn,\r\n#new-project-btn {\r\n  font-size: 0.5em;\r\n}\r\n\r\n#new-project-dialog button {\r\n  font-size: 0.5em;\r\n}\r\n\r\n.dialog-button-group button {\r\n  font-size: 0.7em;\r\n}\r\n\r\ninput:focus {\r\n  font-style: italic;\r\n}\r\nbutton {\r\n  font-weight: bold;\r\n}\r\n\r\n.project-name {\r\n  font-weight: bold;\r\n}\r\n\r\ninput {\r\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n}\r\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var u=this[s][0];null!=u&&(i[u]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var u=n[s],l=r.base?u[0]+r.base:u[0],c=o[l]||0,d="".concat(l," ").concat(c);o[l]=c+1;var f=e(d),m={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)t[f].references++,t[f].updater(m);else{var g=a(m,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:g,references:1})}i.push(d)}return i}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=e(o[i]);t[s].references--}for(var u=r(n,a),l=0;l<o.length;l++){var c=e(o[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},356:(n,t,e)=>{var r=e(379),a=e.n(r),o=e(795),i=e.n(o),s=e(569),u=e.n(s),l=e(565),c=e.n(l),d=e(216),f=e.n(d),m=e(589),g=e.n(m),A=e(890),h={};h.styleTagTransform=g(),h.setAttributes=c(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),a()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals;const p=function(n){return e=n.dueDate,"Invalid Date"!=new Date(e)&&null!=(t=n.title)&&""!=t.trim();var t,e},b=function(n){return null!=(t=n.name)&&""!=t.trim();var t},v=class{constructor(n){this.name=n,this.list=[],this.count=0}addTodoToList(n){return p(n)?(this.list.push(n),this.count+=1,console.log(`successfully added ${n} to ${this.name}`),this.list):console.log(`invalid todoItem ${n}`)}removeTodoFromList(n){return this.list.splice(this.list.indexOf(n),1),console.log(`successfully removed ${n} from ${this.name}`),this.list}},w=class{constructor(n,t,e,r="normal"){this.title=n,this.description=t,this.dueDate=e,this.priority=r}},C=new class{constructor(){this.projects=[],this.projects.push(new v("Todo List")),this.count=this.projects.length}addProject(n){if(!b(n))return console.log("project not valid");this.projects.push(n),this.count+=1}loadProject(n){this.projects=[],this.count=0,n.projects.forEach((n=>{let t=new v(n.name);n.list.forEach((n=>{let e=new w(n.title,n.description,n.dueDate,n.priority);t.addTodoToList(e)})),this.addProject(t)}))}};function y(n){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},y(n)}function E(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function x(n){E(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"===y(n)&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function k(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function B(n){E(1,arguments);var t=x(n),e=t.getUTCDay(),r=(e<1?7:0)+e-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function T(n){E(1,arguments);var t=x(n),e=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var a=B(r),o=new Date(0);o.setUTCFullYear(e,0,4),o.setUTCHours(0,0,0,0);var i=B(o);return t.getTime()>=a.getTime()?e+1:t.getTime()>=i.getTime()?e:e-1}var D={};function M(){return D}function j(n,t){var e,r,a,o,i,s,u,l;E(1,arguments);var c=M(),d=k(null!==(e=null!==(r=null!==(a=null!==(o=null==t?void 0:t.weekStartsOn)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==a?a:c.weekStartsOn)&&void 0!==r?r:null===(u=c.locale)||void 0===u||null===(l=u.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==e?e:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=x(n),m=f.getUTCDay(),g=(m<d?7:0)+m-d;return f.setUTCDate(f.getUTCDate()-g),f.setUTCHours(0,0,0,0),f}function S(n,t){var e,r,a,o,i,s,u,l;E(1,arguments);var c=x(n),d=c.getUTCFullYear(),f=M(),m=k(null!==(e=null!==(r=null!==(a=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:f.firstWeekContainsDate)&&void 0!==r?r:null===(u=f.locale)||void 0===u||null===(l=u.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==e?e:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var g=new Date(0);g.setUTCFullYear(d+1,0,m),g.setUTCHours(0,0,0,0);var A=j(g,t),h=new Date(0);h.setUTCFullYear(d,0,m),h.setUTCHours(0,0,0,0);var p=j(h,t);return c.getTime()>=A.getTime()?d+1:c.getTime()>=p.getTime()?d:d-1}function P(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const U=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return P("yy"===t?r%100:r,t.length)},W=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):P(e+1,2)},L=function(n,t){return P(n.getUTCDate(),t.length)},Y=function(n,t){return P(n.getUTCHours()%12||12,t.length)},N=function(n,t){return P(n.getUTCHours(),t.length)},O=function(n,t){return P(n.getUTCMinutes(),t.length)},z=function(n,t){return P(n.getUTCSeconds(),t.length)},q=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return P(Math.floor(r*Math.pow(10,e-3)),t.length)};var F={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),a=r>0?r:1-r;return e.ordinalNumber(a,{unit:"year"})}return U(n,t)},Y:function(n,t,e,r){var a=S(n,r),o=a>0?a:1-a;return"YY"===t?P(o%100,2):"Yo"===t?e.ordinalNumber(o,{unit:"year"}):P(o,t.length)},R:function(n,t){return P(T(n),t.length)},u:function(n,t){return P(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return P(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return P(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return W(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return P(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){var a=function(n,t){E(1,arguments);var e=x(n),r=j(e,t).getTime()-function(n,t){var e,r,a,o,i,s,u,l;E(1,arguments);var c=M(),d=k(null!==(e=null!==(r=null!==(a=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:c.firstWeekContainsDate)&&void 0!==r?r:null===(u=c.locale)||void 0===u||null===(l=u.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==e?e:1),f=S(n,t),m=new Date(0);return m.setUTCFullYear(f,0,d),m.setUTCHours(0,0,0,0),j(m,t)}(e,t).getTime();return Math.round(r/6048e5)+1}(n,r);return"wo"===t?e.ordinalNumber(a,{unit:"week"}):P(a,t.length)},I:function(n,t,e){var r=function(n){E(1,arguments);var t=x(n),e=B(t).getTime()-function(n){E(1,arguments);var t=T(n),e=new Date(0);return e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0),B(e)}(t).getTime();return Math.round(e/6048e5)+1}(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):P(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):L(n,t)},D:function(n,t,e){var r=function(n){E(1,arguments);var t=x(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=e-t.getTime();return Math.floor(r/864e5)+1}(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):P(r,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return P(o,2);case"eo":return e.ordinalNumber(o,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return P(o,t.length);case"co":return e.ordinalNumber(o,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return P(a,t.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return Y(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):N(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):P(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):P(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):O(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):z(n,t)},S:function(n,t){return q(n,t)},X:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return I(a);case"XXXX":case"XX":return G(a);default:return G(a,":")}},x:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return I(a);case"xxxx":case"xx":return G(a);default:return G(a,":")}},O:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+H(a,":");default:return"GMT"+G(a,":")}},z:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+H(a,":");default:return"GMT"+G(a,":")}},t:function(n,t,e,r){var a=r._originalDate||n;return P(Math.floor(a.getTime()/1e3),t.length)},T:function(n,t,e,r){return P((r._originalDate||n).getTime(),t.length)}};function H(n,t){var e=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),o=r%60;if(0===o)return e+String(a);var i=t||"";return e+String(a)+i+P(o,2)}function I(n,t){return n%60==0?(n>0?"-":"+")+P(Math.abs(n)/60,2):G(n,t)}function G(n,t){var e=t||"",r=n>0?"-":"+",a=Math.abs(n);return r+P(Math.floor(a/60),2)+e+P(a%60,2)}const R=F;var Q=function(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},_=function(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const X={p:_,P:function(n,t){var e,r=n.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return Q(n,t);switch(a){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",Q(a,t)).replace("{{time}}",_(o,t))}};var J=["D","DD"],V=["YY","YYYY"];function Z(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var $={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function K(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth;return n.formats[e]||n.formats[n.defaultWidth]}}const nn={date:K({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:K({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:K({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var tn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function en(n){return function(t,e){var r;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&n.formattingValues){var a=n.defaultFormattingWidth||n.defaultWidth,o=null!=e&&e.width?String(e.width):a;r=n.formattingValues[o]||n.formattingValues[a]}else{var i=n.defaultWidth,s=null!=e&&e.width?String(e.width):n.defaultWidth;r=n.values[s]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(t):t]}}const rn={ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:en({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:en({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:en({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:en({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:en({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function an(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,s=o[0],u=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(u)?function(n,t){for(var e=0;e<n.length;e++)if(n[e].test(s))return e}(u):function(n,t){for(var e in n)if(n.hasOwnProperty(e)&&n[e].test(s))return e}(u);return i=n.valueCallback?n.valueCallback(l):l,{value:i=e.valueCallback?e.valueCallback(i):i,rest:t.slice(s.length)}}}var on,sn={ordinalNumber:(on={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(on.matchPattern);if(!e)return null;var r=e[0],a=n.match(on.parsePattern);if(!a)return null;var o=on.valueCallback?on.valueCallback(a[0]):a[0];return{value:o=t.valueCallback?t.valueCallback(o):o,rest:n.slice(r.length)}}),era:an({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:an({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:an({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:an({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:an({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const un={code:"en-US",formatDistance:function(n,t,e){var r,a=$[n];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:nn,formatRelative:function(n,t,e,r){return tn[n]},localize:rn,match:sn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var ln=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,cn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,dn=/^'([^]*?)'?$/,fn=/''/g,mn=/[a-zA-Z]/;function gn(n,t,e){var r,a,o,i,s,u,l,c,d,f,m,g,A,h,p,b,v,w;E(2,arguments);var C=String(t),B=M(),T=null!==(r=null!==(a=null==e?void 0:e.locale)&&void 0!==a?a:B.locale)&&void 0!==r?r:un,D=k(null!==(o=null!==(i=null!==(s=null!==(u=null==e?void 0:e.firstWeekContainsDate)&&void 0!==u?u:null==e||null===(l=e.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==s?s:B.firstWeekContainsDate)&&void 0!==i?i:null===(d=B.locale)||void 0===d||null===(f=d.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==o?o:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var j=k(null!==(m=null!==(g=null!==(A=null!==(h=null==e?void 0:e.weekStartsOn)&&void 0!==h?h:null==e||null===(p=e.locale)||void 0===p||null===(b=p.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==A?A:B.weekStartsOn)&&void 0!==g?g:null===(v=B.locale)||void 0===v||null===(w=v.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==m?m:0);if(!(j>=0&&j<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!T.localize)throw new RangeError("locale must contain localize property");if(!T.formatLong)throw new RangeError("locale must contain formatLong property");var S=x(n);if(!function(n){if(E(1,arguments),!function(n){return E(1,arguments),n instanceof Date||"object"===y(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var t=x(n);return!isNaN(Number(t))}(S))throw new RangeError("Invalid time value");var P=function(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}(S),U=function(n,t){return E(2,arguments),function(n,t){E(2,arguments);var e=x(n).getTime(),r=k(t);return new Date(e+r)}(n,-k(t))}(S,P),W={firstWeekContainsDate:D,weekStartsOn:j,locale:T,_originalDate:S};return C.match(cn).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,X[t])(n,T.formatLong):n})).join("").match(ln).map((function(r){if("''"===r)return"'";var a,o,i=r[0];if("'"===i)return(o=(a=r).match(dn))?o[1].replace(fn,"'"):a;var s,u=R[i];if(u)return null!=e&&e.useAdditionalWeekYearTokens||(s=r,-1===V.indexOf(s))||Z(r,t,String(n)),null!=e&&e.useAdditionalDayOfYearTokens||!function(n){return-1!==J.indexOf(n)}(r)||Z(r,t,String(n)),u(U,r,T.localize,W);if(i.match(mn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}const An=function(){const n=function(n,t,e,r=""){const a=document.createElement(t);return""!=e&&("."==e[0]&&a.classList.add(e.slice(1)),"#"==e[0]&&(a.id=e.slice(1))),""!=r&&(a.textContent=r),""!=n&&n.appendChild(a),a};return{create:n,createInputLabel:function(t,e,r,a=""){let o=document.createElement("div");""!=e&&o.classList.add(e);let i=n(o,"label","");i.textContent=r;let s=n(o,"input","");return s.type=t,""!=a&&(s.value=a),{div:o,input:s,label:i}},appendChildren:function(n,t){t.forEach((t=>{n.appendChild(t)}))},createSelect:function(n,t){let e=document.createElement("select"),r=document.createElement("label");r.textContent=n;let a=document.createElement("div");return a.appendChild(r),a.appendChild(e),t.forEach((n=>{let t=document.createElement("option");t.value=n,t.textContent=n,e.appendChild(t)})),{div:a,select:e,label:r}},wrapInDiv:function(t,e){let r=n("","div",e);return r.appendChild(t),r},createTextAreaLabel:function(t,e,r=""){let a=document.createElement("div");""!=t&&a.classList.add(t);let o=n(a,"label","");o.textContent=e;let i=n(a,"textarea","");return""!=r&&(i.value=r),{div:a,input:i,label:o}}}}(),hn=function(){const n=function(n){let t;try{t=window[n];const e="__storage_test__";return t.setItem(e,e),t.removeItem(e),!0}catch(n){return n instanceof DOMException&&(22===n.code||1014===n.code||"QuotaExceededError"===n.name||"NS_ERROR_DOM_QUOTA_REACHED"===n.name)&&t&&0!==t.length}};return{available:n,save:function(n){hn.available&&localStorage.setItem("localProjects",JSON.stringify(n))},populated:function(){return!(!n||!localStorage.getItem("localProjects"))}}}(),pn=function(){const n=function(n){let e=document.createElement("dialog"),r=An.createInputLabel("text","dialog-task-title","Title: ",n.title),a=An.createTextAreaLabel("dialog-task-description","Description: ",n.description),o=An.createInputLabel("date","dialog-task-dueDate","Due Date: ",n.dueDate),i=An.createSelect("Priority: ",["low","normal","high"]);i.div.classList.add("dialog-task-priority"),i.select.value=n.priority;let s=An.create(e,"div",".dialog-task-container");An.appendChildren(s,[r.div,a.div,o.div,i.div]);let u=An.create(s,"div",".dialog-button-group"),l=An.create(u,"button","dialog-delete-btn","Close");An.create(u,"button","dialog-save-btn","Save").addEventListener("click",(function(r){t(n,e,s)})),l.addEventListener("click",(function(n){e.close()})),e.appendChild(s),document.body.appendChild(e),e.showModal()},t=function(n,t,e){let r=e.querySelector(".dialog-task-title input"),o=e.querySelector(".dialog-task-description textarea"),i=e.querySelector(".dialog-task-dueDate input"),s=e.querySelector(".dialog-task-priority select"),u=new w(r.value,o.value,i.value,s.value);p(u)?(n.title=u.title,n.description=u.description,n.dueDate=u.dueDate,n.priority=u.priority,t.close(),a()):(console.log("failed to update task"),t.close())},e=function(){const t=document.querySelector(".projects-container");t.replaceChildren(),C.projects.forEach((e=>{let r=function(t){let e=An.create("","div",".project"),r=(An.create(e,"div",".project-name",t.name),An.create(e,"ol",".tasks-container"));t.list.forEach((e=>{let o=function(t,e){let r=document.createElement("li");r.classList.add("task-item");let o=document.createElement("input");o.classList.add("task");let i=function(){let n=An.create("","div",".task-buttons");return{"button-group":n,"details-button":An.create(n,"button","details-btn","view"),"delete-button":An.create(n,"button","delete-btn","delete")}}();return o.value=e.title,o.addEventListener("change",(function(n){let t=new w(this.value,"",gn(Date.now(),"yyyy-MM-dd"));p(t)?(e.title=this.value,document.activeElement?.blur(),console.log("successfully updated "+e)):(this.value=e.title,console.log("invalid new task"))})),i["details-button"].addEventListener("click",(function(t){n(e)})),i["delete-button"].addEventListener("click",(function(){confirm(`Are you sure yo want to delete "${e.title}"`)&&(t.removeTodoFromList(e),a())})),r.appendChild(o),r.appendChild(i["button-group"]),r}(t,e);r.appendChild(o)}));let o=An.create(r,"button",".new-task-btn","New Task");return function(n,t,e){e.addEventListener("click",(function(r){e.classList.add("hidden");let o=document.createElement("input");o.classList.add("temp-task");let i=An.create("","label",".new-task-label","enter task name");o.addEventListener("change",(function(t){let e=new w(this.value,"",gn(Date.now(),"yyyy-MM-dd"));p(e)?(n.addTodoToList(e),a()):a()})),t.insertBefore(o,t.lastChild),t.insertBefore(i,t.lastChild),o.focus()}))}(t,r,o),e}(e);t.appendChild(r)}));const e=document.createElement("button");e.id="new-project-btn",e.textContent="New Project",e.addEventListener("click",(function(n){r()})),t.appendChild(e)},r=function(){let n=An.create(document.body,"dialog","#new-project-dialog"),t=An.create(n,"div",".new-project-container"),e=An.createInputLabel("text","","New project name:");An.appendChildren(t,[e.label,e.input]);let r=An.create(t,"button","new-project-save","Save");e.input.focus(),r.addEventListener("click",(function(t){let r=new v(e.input.value);b(r)&&(C.addProject(r),n.close(),a()),n.close()})),e.input.addEventListener("change",(function(){let t=new v(e.input.value);b(t)&&(C.addProject(t),n.close(),a()),n.close()})),n.addEventListener("click",(t=>{const e=n.getBoundingClientRect();(t.clientX<e.left||t.clientX>e.right||t.clientY<e.top||t.clientY>e.bottom)&&n.close()})),n.showModal()},a=function(){e(),hn.save(C),console.log(C)};return{createPage:function(){An.create(document.body,"div",".projects-container")},renderPage:a}}();if(hn.populated()){let n=localStorage.getItem("localProjects"),t=JSON.parse(n);C.loadProject(t)}pn.createPage(),pn.renderPage()}},n=>{n(n.s=356)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,